#!/usr/bin/python
# -*- coding: UTF-8
# author: Ian
# Please,you must believe yourself who can do it beautifully !
"""
Are you OK?

系统读取前64个货道数据帧：01 03 00 00 00 48 45 FC

17:47:29.592 01 03 00 00 00 48 45 FC
17:47:29.641 01 03 90 00 03 00 03 00 00 01 F4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 D0 D2

称重模块回传数据帧：
01 03 90 （01：从站地址，03：功能码，90:回传的数据字节数）
FF FF（1~16称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF（1~16称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 01 （1号称重单元重量值）
00 00 （2号称重单元重量值）
00 0A （3号称重单元重量值）
03 E8 （4号称重单元重量值）
00 00 （5号称重单元重量值）
00 00 （6号称重单元重量值）
00 00 （7号称重单元重量值）
00 00 （8号称重单元重量值）
00 00 （9号称重单元重量值）
00 00 （10号称重单元重量值）
00 00 （11号称重单元重量值）
00 00 （12号称重单元重量值）
00 00 （13号称重单元重量值）
00 00 （14号称重单元重量值）
00 01（15号称重单元重量值）
00 01（16号称重单元重量值）
FF FF （17~32称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF （17~32称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 00 （17号称重单元重量值）
00 00 （18号称重单元重量值）
00 00 （19号称重单元重量值）
00 00 （20号称重单元重量值）
00 00 （21号称重单元重量值）
00 00 （22号称重单元重量值）
00 00 （23号称重单元重量值）
00 00 （24号称重单元重量值）
00 00 （25号称重单元重量值）
00 00 （26号称重单元重量值）
00 00 （27号称重单元重量值）
00 00 （28号称重单元重量值）
00 00 （29号称重单元重量值）
00 00 （30号称重单元重量值）
00 00 （31号称重单元重量值）
00 00 （32号称重单元重量值）
FF FF（33~48称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF（33~48称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 01 （33号称重单元重量值）
00 00 （34号称重单元重量值）
00 0A （35号称重单元重量值）
03 E8 （36号称重单元重量值）
00 00 （37号称重单元重量值）
00 00 （38号称重单元重量值）
00 00 （39号称重单元重量值）
00 00 （40号称重单元重量值）
00 00 （41号称重单元重量值）
00 00 （42号称重单元重量值）
00 00 （43号称重单元重量值）
00 00 （44号称重单元重量值）
00 00 （45号称重单元重量值）
00 00 （46号称重单元重量值）
00 01（47号称重单元重量值）
00 01（48号称重单元重量值）
FF FF （49~64称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF （49~64称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 00 （49号称重单元重量值）
00 00 （50号称重单元重量值）
00 00 （51号称重单元重量值）
00 00 （52号称重单元重量值）
00 00 （53号称重单元重量值）
00 00 （54号称重单元重量值）
00 00 （55号称重单元重量值）
00 00 （56号称重单元重量值）
00 00 （57号称重单元重量值）
00 00 （58号称重单元重量值）
00 00 （59号称重单元重量值）
00 00 （60号称重单元重量值）
00 00 （61号称重单元重量值）
00 00 （62号称重单元重量值）
00 00 （63号称重单元重量值）
00 00 （64号称重单元重量值）
10 B1 （校验码）


系统读取第65-128个货道数据帧：01 03 00 49 00 48 94 2A

17:54:33.451 01 03 00 49 00 48 94 2A
17:54:33.499 01 03 90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 BB 13

称重模块回传数据帧：
01 03 90 （01：从站地址，03：功能码，90:回传的数据字节数）
FF FF（65~80称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF（65~80称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 01 （65号称重单元重量值）
00 00 （66号称重单元重量值）
00 0A （67号称重单元重量值）
03 E8 （68号称重单元重量值）
00 00 （69号称重单元重量值）
00 00 （70号称重单元重量值）
00 00 （71号称重单元重量值）
00 00 （72号称重单元重量值）
00 00 （73号称重单元重量值）
00 00 （74号称重单元重量值）
00 00 （75号称重单元重量值）
00 00 （76号称重单元重量值）
00 00 （77号称重单元重量值）
00 00 （78号称重单元重量值）
00 01（79号称重单元重量值）
00 01（80号称重单元重量值）
FF FF （81~96称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF （81~96称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 00 （81号称重单元重量值）
00 00 （82号称重单元重量值）
00 00 （83号称重单元重量值）
00 00 （84号称重单元重量值）
00 00 （85号称重单元重量值）
00 00 （86号称重单元重量值）
00 00 （87号称重单元重量值）
00 00 （88号称重单元重量值）
00 00 （89号称重单元重量值）
00 00 （90号称重单元重量值）
00 00 （91号称重单元重量值）
00 00 （92号称重单元重量值）
00 00 （93号称重单元重量值）
00 00 （94号称重单元重量值）
00 00 （95号称重单元重量值）
00 00 （96号称重单元重量值）
FF FF（97~112称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF（97~112称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 01 （97号称重单元重量值）
00 00 （98号称重单元重量值）
00 0A （99号称重单元重量值）
03 E8 （100号称重单元重量值）
00 00 （101号称重单元重量值）
00 00 （102号称重单元重量值）
00 00 （103号称重单元重量值）
00 00 （104号称重单元重量值）
00 00 （105号称重单元重量值）
00 00 （106号称重单元重量值）
00 00 （107号称重单元重量值）
00 00 （108号称重单元重量值）
00 00 （109号称重单元重量值）
00 00 （110号称重单元重量值）
00 01（111号称重单元重量值）
00 01（112号称重单元重量值）
FF FF （113~128称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
FF FF （113~128称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
00 00 （113号称重单元重量值）
00 00 （114号称重单元重量值）
00 00 （115号称重单元重量值）
00 00 （116号称重单元重量值）
00 00 （117号称重单元重量值）
00 00 （118号称重单元重量值）
00 00 （119号称重单元重量值）
00 00 （120号称重单元重量值）
00 00 （121号称重单元重量值）
00 00 （122号称重单元重量值）
00 00 （123号称重单元重量值）
00 00 （124号称重单元重量值）
00 00 （125号称重单元重量值）
00 00 （126号称重单元重量值）
00 00 （127号称重单元重量值）
00 00 （128号称重单元重量值）
10 B1 （校验码）


标定称重单元的地址：01 10 03 ED 00 01 02 00 01 43 ED
写入成功后回传数据：01 10 03 ED 00 01 91 B8

标定零点发送的数据帧：01 10 03 EF 00 01 02 00 01 42 0F
写入成功后回传数据：01 10 03 EF 00 01 30 78

写入砝码重量发送的数据帧：01 10 03 EE 00 01 02 03 E8 82 A0
写入成功后回传数据：01 10 03 EE 00 01 61 B8

标定增益发送的数据帧：01 10 03 EF 00 01 02 00 02 02 0E
写入成功后回传数据：01 10 03 EF 00 01 30 78

"""

import serial
import time
import binascii
import DeviceManager

DEVICE_NAME = "com9"
DEVICE_PORT = 38400
index = 0


def getDevice(name, port):
    # device = serial.Serial(name, port, bytesize=8, timeout=3 * 1000)
    device = serial.Serial(name, port)
    print("串口是否打开", device.is_open)
    return device


def decodeData(data):
    print("******************************************************************************")
    print("******************************************************************************")
    print(data)
    print("原数据大小#", len(data))
    result = data.upper()
    print("起始位01 03 90 （01：从站地址，03：功能码，90:回传的数据字节数）：%s" % result[0:6])

    # 每次4个
    step = 4
    start = 0
    end = 0
    # 起始跳过6个字节
    skip = 6
    weightInfo = []
    for i in range(1, 5):
        # 起始跳过6个字节
        if i == 1:
            start = skip
        else:
            start = end

        end = start + step
        # FF FF（1~16称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
        weight_status_flag_16 = result[start:end]
        weight_status_flag_10 = int(result[start:end], 16)
        text = "第{0}组称重单元#0为故障不稳定，1为正常稳定#(st={1},ed={2})#十六进制:{3},十进制:{4}".format(i, start,
                                                                                  end,
                                                                                  weight_status_flag_16,
                                                                                  weight_status_flag_10)
        print(text)

        start = end
        end = start + step
        # FF FF（1~16称重单元AD模块是否稳定的标志位，0为对应称重单元重量不在线，1为在线）
        weight_stable_flag_16 = result[start:end]
        weight_stable_flag_10 = int(result[start:end], 16)
        text = "第{0}组称重单元#0为对应称重单元重量不在线，1为在线#(st={1},ed={2})#十六进制:{3},十进制:{4}".format(i, start,
                                                                                      end,
                                                                                      weight_stable_flag_16,
                                                                                      weight_stable_flag_10)
        print(text)

        # FF FF（1~16称重单元AD模块是否正常的标志位，0为故障不稳定，1为正常稳定）
        if weight_stable_flag_10 == 0:
            print("第%d组不稳重" % i)
            print("################################################")

        # FF FF（1~16称重单元AD模块是否正常的标志位，0为对应称重单元重量不在线，1为在线）
        if weight_status_flag_10 == 0:
            print("第%d组不在线" % i)
            print("################################################")

        weightRowInfo = {}
        weightRowInfo["status"] = weight_status_flag_10
        weightRowInfo["stable"] = weight_stable_flag_10

        for j in range(0, 16):
            global index
            index += 1

            start = end
            end = start + step
            # 称重单元的重量
            weight_value_16 = result[start:end]
            weight_value_10 = int(result[start:end], 16)
            text = "第{0}称重单元的重量(st={1},ed={2})#十六进制:{3},十进制:{4}".format(index, start, end, weight_value_16,
                                                                        weight_value_10)
            print(text)
            # weightRowInfo["{0}".format(index)] = weight_value_10
            weightRowInfo[str(index)] = weight_value_10

        weightInfo.append(weightRowInfo)

    start = end
    end = start + step
    # 10 B1 （校验码）
    check_flag_16 = result[start:end]
    check_flag_10 = int(result[start:end], 16)
    text = "结束检验码#10 B1（校验码）#(st={0},ed={1})#十六进制:{2},十进制:{3}".format(start, end, check_flag_16, check_flag_10)
    print(text)
    print("******************************************************************************")
    print("******************************************************************************")

    return weightInfo

"""
系统读取前64个货道数据帧：01 03 00 00 00 48 45 FC
"""
def send64Command(device):

    data = [0x01, 0x03, 0x00, 0x00, 0x00, 0x48, 0x45, 0xFC]
    try:
        device.write(serial.to_bytes(data))
    except Exception as e:
        print(e)

"""
系统读取第65-128个货道数据帧：01 03 00 49 00 48 94 2A
"""
def send128Command(device):
    try:
        data = bytes.fromhex("01 03 00 49 00 48 94 2A")
        device.write(data)
    except Exception as e:
        print(e)

def receiveData(device):
    data = ''
    while device.in_waiting > 0:
        data += device.read(1)
    return data

def startApp():
    device = getDevice(DEVICE_NAME, DEVICE_PORT)

    current_time = time.time()
    start_time = current_time

    while True:

        if DeviceManager.isStop:
            break

        current_time = time.time()

        if current_time - start_time < 0.5:
            continue

        start_time = current_time
        print(time.strftime('The value is %Y %m %d %H:%M:%S', time.localtime()))
        print("_____________________  系统读取前64个货道数据帧  ______________________________")
        send64Command(device)
        global index
        index = 0
        data = str(binascii.b2a_hex(device.read(149)))[2:-1]  # Hex转换成字符串
        weight_64 = decodeData(data)

        print("_____________________  读取第65-128个货道数据帧 ______________________________")
        send128Command(device)
        data = str(binascii.b2a_hex(device.read(149)))[2:-1]  # Hex转换成字符串
        weight_128 = decodeData(data)

        # 更新数据
        DeviceManager.updateWeightInfo(weight_64, weight_128)

if __name__ == "__main__":
    print("Hello World")
    startApp()
